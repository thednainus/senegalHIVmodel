r = 1,
c = 2)
gpm2gpf_AGm4["Model"] <- "Model 4"
gpm2gpf_AG <- rbind(gpm2gpf_AGm1[1,], gpm2gpf_AGm2[1,],
gpm2gpf_AGm3[1,], gpm2gpf_AGm4[1,])
# Model 2
gpm2gpf_m2 <- deme2deme(births.p = dm_m2.2$run[2,],
times = dm_m2.2$run[[1]],
r = 1,
c = 2)
gpm2gpf_m2["Model"] <- "Model 2"
# Model 5 (prevalence) = Model 2
gpm2gpf_m5 <- deme2deme(births.p = dm_m5.1$run[2,],
times = dm_m5.1$run[[1]],
r = 1,
c = 2)
gpm2gpf_m5["Model"] <- "Model 5"
# Model 3
gpm2gpf_m3 <- deme2deme(births.p = dm_m3.2$run[2,],
times = dm_m3.2$run[[1]],
r = 1,
c = 2)
gpm2gpf_m3["Model"] <- "Model 3"
# Model 6 (prevalence) = Model 3
gpm2gpf_m6 <- deme2deme(births.p = dm_m6.1$run[2,],
times = dm_m6.1$run[[1]],
r = 1,
c = 2)
gpm2gpf_m6["Model"] <- "Model 6"
# Model 4
gpm2gpf_m4 <- deme2deme(births.p = dm_m4.2$run[2,],
times = dm_m4.2$run[[1]],
r = 1,
c = 2)
gpm2gpf_m4["Model"] <- "Model 4"
# Model 7 (prevalence) = Model 4
gpm2gpf_m7 <- deme2deme(births.p = dm_m7.2$run[2,],
times = dm_m7.2$run[[1]],
r = 1,
c = 2)
gpm2gpf_m7["Model"] <- "Model 7"
gpm2gpf_All <- rbind(gpm2gpf_m2[1,], gpm2gpf_m3[1,],gpm2gpf_m4[1,],
gpm2gpf_m5[1,], gpm2gpf_m6[1,],gpm2gpf_m7[1,])
save(gpm2gpf_C, gpm2gpf_AG, gpm2gpf_All, file="gpm2gpf.rda")
gpm2gpf_C
gpm2gpf_AG
gpm2gpf_All
calculate_pafs()
0.4/100
library(BayesianTools)
?dm
dm
?build.demographic.process
library(devtools)
install_github("https://github.com/thednainus/phydynR")
install_github("thednainus/phydynR")
library(phydynR)
?build.demographic.process
library(senegalHIVmodel)
?posterior_trajectories
devtools::document()
library(senegalHIVmodel)
?posterior_trajectories
posterior_trajectories
post_traj_mx
dm
dm
# source model.R script to have access to the values of THETA
# and to
source("analyses/scripts/Models/Subtypes_Combined/Model2/1.model.v2.R")
dm
####### create plots for the effective number of infections
# for subtypes C and 02_AG, and for subtypes combined
library(ggplot2)
library(phydynR)
library(reshape2)
library(senegalHIVmodel)
# SUBTYPE C
# Load solved objects
load("analyses/plots/solved_objects/FINAL/dmC_m1.2.rda")
sizes.map = dmC_m1.2$MAP[4]
# teste deletar depois
teste <- lapply(sizes.map, function(x) x[1:3])
teste
teste2 <- reorganize_deme_sizes(Nrep = 1, Ntime = 3,
teste)
teste2
total_by_time <- Reduce("+", values)
total_by_time <- Reduce("+", teste2)
total_by_time
teste2/total_by_time
teste2
total_by_time
prop_infect <- lapply(teste2, function(x) x/total_by_time)
prop_infect
0.2502005+0.3849594+0.3648402
sizes.p = dmC_m1.2$run[4,]
#re-organize demes by sizes element
o.sizes.p <- reorganize_deme_sizes(Nrep = 1000, Ntime = 1000,
sizes = sizes.p)
# get the dataframe to plot tajectories for sizes (median and quantiles)
mq <- prop_infected(o.sizes.p, times)
times = dmC_m1.2$run[[1]]
# get the dataframe to plot tajectories for sizes (median and quantiles)
mq <- prop_infected(o.sizes.p, times)
times
prop_infected
# get the dataframe to plot tajectories for sizes (median and quantiles)
mq <- prop_infected(o.sizes.p)
head(mq)
#re-organize demes by sizes element
o.sizes.p <- reorganize_deme_sizes(Nrep = 1000, Ntime = 1000,
sizes = sizes.p)
o.sizes.p
prop_infected()
prop_infected
devtools::document()
library(senegalHIVmodel)
prop_infected
####### create plots for the effective number of infections
# for subtypes C and 02_AG, and for subtypes combined
library(ggplot2)
library(phydynR)
library(reshape2)
library(senegalHIVmodel)
# SUBTYPE C
# Load solved objects
load("analyses/plots/solved_objects/FINAL/dmC_m1.2.rda")
sizes.p = dmC_m1.2$run[4,]
times = dmC_m1.2$run[[1]]
#re-organize demes by sizes element
o.sizes.p <- reorganize_deme_sizes(Nrep = 1000, Ntime = 1000,
sizes = sizes.p)
# get the dataframe to plot tajectories for sizes (median and quantiles)
mq <- prop_infected(o.sizes.p, times)
head(mq)
mq["group2"] <- ifelse(mq$group == "msm", "msm", "gp")
head(mq)
tail(mq)
prop_infected
# calculate sizes for MAP
o.sizes.map <- reorganize_deme_sizes(Nrep = 1, Ntime = Ntime,
sizes.map)
Ntime=1000
#re-organize demes by sizes element
o.sizes.p <- reorganize_deme_sizes(Nrep = Nrep, Ntime = Ntime,
sizes = sizes.p)
# calculate sizes for MAP
o.sizes.map <- reorganize_deme_sizes(Nrep = 1, Ntime = Ntime,
sizes.map)
sizes.map = dmC_m1.2$MAP[4]
# calculate sizes for MAP
o.sizes.map <- reorganize_deme_sizes(Nrep = 1, Ntime = Ntime,
sizes.map)
total_by_time <- Reduce("+", o.sizes.map)
prop_infect <- lapply(o.sizes.map, function(x) x/total_by_time)
head(as.data.frame(prop_infect$gpm, prop_infect$gpf, prop_infect$msm))
head(as.data.frame(prop_infect$gpm))
prop_infected
head(as.data.frame(cbind(prop_infect$gpm, prop_infect$gpf, prop_infect$msm)))
prop_infect
head(prop_infect$msm)
head(t(prop_infect$msm))
head(as.data.frame(cbind(t(prop_infect$gpm), t(prop_infect$gpf), t(prop_infect$msm))))
0.2502005+0.3849594+0.3648402
0.2497815+ 0.3844788+ 0.3657397
#convert it to dataframe and transform to long format
map.df <- as.data.frame(cbind(t(prop_infect$gpm),
t(prop_infect$gpf),
t(prop_infect$msm)))
head(map.df)
names("gpm", "gpf", "msm")
head(mq)
#convert it to dataframe and transform to long format
map.df <- as.data.frame(cbind(gpm = t(prop_infect$gpm),
gpf = t(prop_infect$gpf),
msm = t(prop_infect$msm)))
head(map.df)
#convert it to dataframe and transform to long format
gpm.map <- as.data.frame(t(prop_infect$gpm))
head(gpm.map)
#convert it to dataframe and transform to long format
gpm.map <- as.data.frame(t(prop_infect$gpm))
gpm.map["group"] <- "gpm"
gpf.map <- as.data.frame(t(prop_infect$gpf))
gpf.map["group"] <- "gpf"
msm.map <- as.data.frame(t(prop_infect$msm))
msm.map["group"] <- "msm"
head(msm.map)
head(mq)
gpm.map["group2"] <- "gp"
gpf.map["group2"] <- "gp"
msm.map["group2"] <- "msm"
map.df <- rbind(gpm.map, gpf.map, msm.map)
head(map.df)
names(map.df$V1) <- "MAP"
head(map.df)
names(map.df) <- c("MAP", "group", "group2")
head(map.df)
str(map.df)
str(mq)
#add map to dataframe
mq["MAP"] <- map.df$MAP
head(mq)
devtools::document()
library(senegalHIVmodel)
####### create plots for the effective number of infections
# for subtypes C and 02_AG, and for subtypes combined
library(ggplot2)
library(phydynR)
library(reshape2)
library(senegalHIVmodel)
# SUBTYPE C
# Load solved objects
load("analyses/plots/solved_objects/FINAL/dmC_m1.2.rda")
load("analyses/plots/solved_objects/FINAL/dmC_m2.rda")
# MODEL 1
Cm1_sizes <- df_sizes(sizes.p = dmC_m1.2$run[4,],
sizes.map = dmC_m1.2$MAP[4],
times = dmC_m1.2$run[[1]], Nrep = 1000, Ntime = 1000)
head(Cm1_sizes)
sizes.map = dmC_m1.2$MAP[4]
times = dmC_m1.2$run[[1]]
Nrep = 1000
Ntime = 1000
# calculate sizes for MAP
o.sizes.map <- reorganize_deme_sizes(Nrep = 1, Ntime = Ntime,
sizes.map)
total_by_time <- Reduce("+", o.sizes.map)
prop_infect <- lapply(o.sizes.map, function(x) x/total_by_time)
#convert it to dataframe and transform to long format
gpm.map <- as.data.frame(t(prop_infect$gpm))
gpm.map["group"] <- "gpm"
gpm.map["group2"] <- "gp"
gpf.map <- as.data.frame(t(prop_infect$gpf))
gpf.map["group"] <- "gpf"
gpf.map["group2"] <- "gp"
msm.map <- as.data.frame(t(prop_infect$msm))
msm.map["group"] <- "msm"
msm.map["group2"] <- "msm"
map.df <- rbind(gpm.map, gpf.map, msm.map)
#re-organize demes by sizes element
o.sizes.p <- reorganize_deme_sizes(Nrep = Nrep, Ntime = Ntime,
sizes = sizes.p)
sizes.p = dmC_m1.2$run[4,]
#re-organize demes by sizes element
o.sizes.p <- reorganize_deme_sizes(Nrep = Nrep, Ntime = Ntime,
sizes = sizes.p)
# get the dataframe to plot tajectories for sizes (median and quantiles)
mq <- prop_infected(o.sizes.p, times)
mq["group2"] <- ifelse(mq$group == "msm", "msm", "gp")
names(map.df) <- c("MAP", "group", "group2")
#add map to dataframe
mq["MAP"] <- map.df$MAP
head(mq)
# MODEL 1
Cm1_sizes <- df_sizes_prop(sizes.p = dmC_m1.2$run[4,],
sizes.map = dmC_m1.2$MAP[4],
times = dmC_m1.2$run[[1]], Nrep = 1000, Ntime = 1000)
head(Cm1_sizes)
# SUBTYPE C
# Load solved objects
load("analyses/plots/solved_objects/FINAL/dmC_m1.2.rda")
load("analyses/plots/solved_objects/FINAL/dmC_m2.rda")
# MODEL 1
Cm1_sizes <- df_sizes_prop(sizes.p = dmC_m1.2$run[4,],
sizes.map = dmC_m1.2$MAP[4],
times = dmC_m1.2$run[[1]], Nrep = 1000, Ntime = 1000)
Cm1_sizes["Model"] <- "Model 1"
# MODEL 2
Cm2_sizes <- df_sizes_prop(sizes.p = dmC_m2.2$run[4,],
sizes.map = dmC_m2.2$MAP[4],
times = dmC_m2.2$run[[1]], Nrep = 1000, Ntime = 1000)
Cm2_sizes["Model"] <- "Model 2"
#PREVALENCE
# Load solved objects
load("analyses/plots/solved_objects/FINAL/dmC_m3.rda")
load("analyses/plots/solved_objects/FINAL/dmC_m4.2.rda")
Cm3_sizes <- df_sizes_prop(sizes.p = dmC_m3.1$run[4,],
sizes.map = dmC_m3.1$MAP[4],
times = dmC_m3.1$run[[1]], Nrep = 1000, Ntime = 1000)
Cm3_sizes["Model"] <- "Model 3"
Cm4_sizes <- df_sizes_prop(sizes.p = dmC_m4.2$run[4,],
sizes.map = dmC_m4.2$MAP[4],
times = dmC_m4.2$run[[1]], Nrep = 1000, Ntime = 1000)
Cm4_sizes["Model"] <- "Model 4"
#merge dataframes
SN_C <- rbind(Cm1_sizes, Cm2_sizes, Cm3_sizes, Cm4_sizes)
SN_C["subtitle"] <- paste(SN_C$Model, SN_C$group2, sep=" - ")
SN_C.l <- melt(SN_C, id.vars = c("times", "lower", "upper", "group", "group2",
"Model", "subtitle"))
head(SN_C.l)
#PLOT
Cp1 <- ggplot(SN_C.l, aes(x=times)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.20) +
geom_line(aes(y = value, colour=group, linetype=variable)) +
facet_wrap(subtitle ~ ., scales = "free", ncol = 2) +
ggtitle("Subtype C") + ylab("Effective number of infections") + theme_bw()
quartz()
Cp1
###############################################################################
# SUBTYPE 02_AG
# Load solved objects
load("analyses/plots/solved_objects/FINAL/dmAG_m1.rda")
load("analyses/plots/solved_objects/FINAL/dmAG_m2.rda")
AGm1_sizes <- df_sizes(sizes.p = dmAG_m1.1$run[4,],
sizes.map = dmAG_m1.1$MAP[4],
times = dmAG_m1.1$run[[1]], Nrep = 1000, Ntime = 1000)
AGm1_sizes["Model"] <- "Model 1"
AGm2_sizes <- df_sizes(sizes.p = dmAG_m2.1$run[4,],
sizes.map = dmAG_m2.1$MAP[4],
times = dmAG_m2.1$run[[1]], Nrep = 1000, Ntime = 1000)
AGm2_sizes["Model"] <- "Model 2"
#PREVALENCE
# Load solved objects
load("analyses/plots/solved_objects/FINAL/dmAG_m3.2.rda")
load("analyses/plots/solved_objects/FINAL/dmAG_m4.2.rda")
# Model 1
AGm1_sizes <- df_sizes_prop(sizes.p = dmAG_m1.1$run[4,],
sizes.map = dmAG_m1.1$MAP[4],
times = dmAG_m1.1$run[[1]], Nrep = 1000, Ntime = 1000)
AGm1_sizes["Model"] <- "Model 1"
# MODEL 2
AGm2_sizes <- df_sizes_prop(sizes.p = dmAG_m2.1$run[4,],
sizes.map = dmAG_m2.1$MAP[4],
times = dmAG_m2.1$run[[1]], Nrep = 1000, Ntime = 1000)
AGm2_sizes["Model"] <- "Model 2"
# Model 3
AGm3_sizes <- df_sizes_prop(sizes.p = dmAG_m3.2$run[4,],
sizes.map = dmAG_m3.2$MAP[4],
times = dmAG_m3.2$run[[1]], Nrep = 1000, Ntime = 1000)
AGm3_sizes["Model"] <- "Model 3"
# MODEL 4
AGm4_sizes <- df_sizes_prop(sizes.p = dmAG_m4.2$run[4,],
sizes.map = dmAG_m4.2$MAP[4],
times = dmAG_m4.2$run[[1]], Nrep = 1000, Ntime = 1000)
AGm4_sizes["Model"] <- "Model 4"
#merge dataframes
SN_AG <- rbind(AGm1_sizes, AGm2_sizes, AGm3_sizes, AGm4_sizes)
SN_AG["subtitle"] <- paste(SN_AG$Model, SN_AG$ group2, sep=" - ")
SN_AG.l <- melt(SN_AG, id.vars = c("times", "lower", "upper", "group", "group2",
"Model", "subtitle"))
#PLOT
AGp1 <- ggplot(SN_AG.l, aes(x=times)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.20) +
geom_line(aes(y = value, colour=group, linetype=variable)) +
facet_wrap(subtitle ~ ., scales = "free", ncol = 2) +
ggtitle("Subtype 02AG") + ylab("Effective number of infections") + theme_bw()
AGp1
# Load solved objects
load("analyses/plots/solved_objects/FINAL/dm_m2.2.rda")
load("analyses/plots/solved_objects/FINAL/dm_m3.2.rda")
load("analyses/plots/solved_objects/FINAL/dm_m4.2.rda")
#PREVALENCE
load("analyses/plots/solved_objects/FINAL/dm_m5.rda")
load("analyses/plots/solved_objects/FINAL/dm_m6.rda")
load("analyses/plots/solved_objects/FINAL/dm_m7.2.rda")
# Model 2
m2_sizes <- df_sizes_prop(sizes.p = dm_m2.2$run[4,],
sizes.map = dm_m2.2$MAP[4],
times = dm_m2.2$run[[1]], Nrep = 1000, Ntime = 1000)
m2_sizes["Model"] <- "Model 2"
# Model 5 (prevalence) = Model 2
m5_sizes <- df_sizes_prop(sizes.p = dm_m5.1$run[4,],
sizes.map = dm_m5.1$MAP[4],
times = dm_m5.1$run[[1]], Nrep = 1000, Ntime = 1000)
m5_sizes["Model"] <- "Model 5"
# Model 3
m3_sizes <- df_sizes_prop(sizes.p = dm_m3.2$run[4,],
sizes.map = dm_m3.2$MAP[4],
times = dm_m3.2$run[[1]], Nrep = 1000, Ntime = 1000)
m3_sizes["Model"] <- "Model 3"
# Model 6 (prevalence) = Model 3
m6_sizes <- df_sizes_prop(sizes.p = dm_m6.1$run[4,],
sizes.map = dm_m6.1$MAP[4],
times = dm_m6.1$run[[1]], Nrep = 1000, Ntime = 1000)
m6_sizes["Model"] <- "Model 6"
# Model 4
m4_sizes <- df_sizes_prop(sizes.p = dm_m4.2$run[4,],
sizes.map = dm_m4.2$MAP[4],
times = dm_m4.2$run[[1]], Nrep = 1000, Ntime = 1000)
m4_sizes["Model"] <- "Model 4"
# Model 7 (prevalence) = Model 4
m7_sizes <- df_sizes_prop(sizes.p = dm_m7.2$run[4,],
sizes.map = dm_m7.2$MAP[4],
times = dm_m7.2$run[[1]], Nrep = 1000, Ntime = 1000)
m7_sizes["Model"] <- "Model 7"
#merge dataframes
SN_m2and5 <- rbind(m2_sizes, m5_sizes)
SN_m2and5["subtitle"] <- paste(SN_m2and5$Model, SN_m2and5$group2, sep=" - ")
SN_m2and5.l <- melt(SN_m2and5, id.vars = c("times", "lower", "upper", "group",
"group2", "Model", "subtitle"))
SN_m3and6 <- rbind(m3_sizes, m6_sizes)
SN_m3and6["subtitle"] <- paste(SN_m3and6$Model, SN_m3and6$group2, sep=" - ")
SN_m3and6.l <- melt(SN_m3and6, id.vars = c("times", "lower", "upper", "group",
"group2", "Model", "subtitle"))
SN_m4and7 <- rbind(m4_sizes, m7_sizes)
SN_m4and7["subtitle"] <- paste(SN_m4and7$Model, SN_m4and7$group2, sep=" - ")
SN_m4and7.l <- melt(SN_m4and7, id.vars = c("times", "lower", "upper", "group",
"group2", "Model", "subtitle"))
#PLOT
m2and5.p1 <- ggplot(SN_m2and5.l, aes(x=times)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.20) +
geom_line(aes(y = value, colour=group, linetype=variable)) +
facet_wrap(subtitle ~ ., scales = "free", ncol = 2) +
ggtitle("Subtypes Combined") + ylab("Effective number of infections") +
theme_bw()
m3and6.p1 <- ggplot(SN_m3and6.l, aes(x=times)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.20) +
geom_line(aes(y = value, colour=group, linetype=variable)) +
facet_wrap(subtitle ~ ., scales = "free", ncol = 2) +
ggtitle("Subtypes Combined") + ylab("Effective number of infections") +
theme_bw()
m4and7.p1 <- ggplot(SN_m4and7.l, aes(x=times)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.20) +
geom_line(aes(y = value, colour=group, linetype=variable)) +
facet_wrap(subtitle ~ ., scales = "free", ncol = 2) +
ggtitle("Subtypes Combined") + ylab("Effective number of infections") +
theme_bw()
m2and5.p1
m3and6.p1
m4and7.p1
# load data for combined subtypes
load(system.file("data/mcmc_runs/FINAL/Model5.rda",
package = "senegalHIVmodel"))
m5.1
load(system.file("data/mcmc_runs/FINAL/Model7.rda",
package = "senegalHIVmodel"))
m7.1
library(BayesianTools)
quartz()
library(senegalHIVmodel)
?read_mcmc_rds
posterior_trajectories
# Reads the dated tree for subtype B, C and 02_AG
tB.CGR.Gp <- readRDS(system.file("data/trees_by_subtype/dtr.B.CGR.GTR_Gp12+3_byCodon.RDS",
package = "senegalHIVmodel"))
tB.CGR.Gp$timeOfMRCA #1974.837 youngest
tC.CGR.Gp <- readRDS(system.file("data/trees_by_subtype/dtr.C.CGR.GTR_Gp12+3_byCodon.RDS",
package = "senegalHIVmodel"))
tAG.CGR.Gp <- readRDS(system.file("data/trees_by_subtype/dtr.AG.CGR.GTR_Gp12+3_byCodon.RDS",
package = "senegalHIVmodel"))
tC.CGR.Gp$timeOfMRCA
tAG.CGR.Gp$timeOfMRCA
# Gets the time of the most recent common ancestor (MRCA)
tB.CGR.Gp$timeOfMRCA #1974.837 youngest
tC.CGR.Gp$timeOfMRCA #1960.757 middle age
tAG.CGR.Gp$timeOfMRCA #1950.909 oldest
# Create a root edge to add to the youngest MRCA
# (in this example it is the Subtype B tree)
B.edge <- tB.CGR.Gp$timeOfMRCA - tC.CGR.Gp$timeOfMRCA
tB.CGR.Gp$root.edge <- B.edge
# Bind the 2 youngest trees together
tr <- bind.tree(tC.CGR.Gp, tB.CGR.Gp)
# Create a root edge to add to the oldest MRCA
tr.edge <- tC.CGR.Gp$timeOfMRCA - tAG.CGR.Gp$timeOfMRCA
library(ape)
library(treedater)
# Reads the dated tree for subtype B, C and 02_AG
tB.CGR.Gp <- readRDS(system.file("data/trees_by_subtype/dtr.B.CGR.GTR_Gp12+3_byCodon.RDS",
package = "senegalHIVmodel"))
tC.CGR.Gp <- readRDS(system.file("data/trees_by_subtype/dtr.C.CGR.GTR_Gp12+3_byCodon.RDS",
package = "senegalHIVmodel"))
tAG.CGR.Gp <- readRDS(system.file("data/trees_by_subtype/dtr.AG.CGR.GTR_Gp12+3_byCodon.RDS",
package = "senegalHIVmodel"))
# Gets the time of the most recent common ancestor (MRCA)
tB.CGR.Gp$timeOfMRCA #1974.837 youngest
tC.CGR.Gp$timeOfMRCA #1960.757 middle age
tAG.CGR.Gp$timeOfMRCA #1950.909 oldest
# Create a root edge to add to the youngest MRCA
# (in this example it is the Subtype B tree)
B.edge <- tB.CGR.Gp$timeOfMRCA - tC.CGR.Gp$timeOfMRCA
tB.CGR.Gp$root.edge <- B.edge
# Bind the 2 youngest trees together
tr <- bind.tree(tC.CGR.Gp, tB.CGR.Gp)
# Create a root edge to add to the oldest MRCA
tr.edge <- tC.CGR.Gp$timeOfMRCA - tAG.CGR.Gp$timeOfMRCA
tr$root.edge <- tr.edge
# Bind the 3rd tree to the prevoius binded tree "tr"
tr2 <- bind.tree(tAG.CGR.Gp, tr)
# add estimated dates to a variable
time.B <- tB.CGR.Gp$sts
time.C <- tC.CGR.Gp$sts
time.AG <- tAG.CGR.Gp$sts
all.times <- c(time.AG, time.C, time.B)
# Create plot "distance tip to root" vs "estimated dates"
# You should expect to see a 1 to 1 relationship if everythig
# was merged correctly
plot(dist.nodes(tr2)[1:617,618], all.times)
plot(dist.nodes(tr)[1:169,170], c(time.C, time.B))
# Drop tips that are from Children, risk group = NA, and sex = NA
# That is because the mathematical model assumes we know this information for
# each tip
metadata <- read.csv(system.file("data/HIV_subtypes_summary_SENEGAL_noDups.csv",
package = "senegalHIVmodel"))
metadata2 <- subset(metadata, is.na(Risk_group) == TRUE |
Risk_group == "Children" |
is.na(Sex) == TRUE)
metadata2$tip <- paste(metadata2$Accession_number,
metadata2$Subtype, "SN", metadata2$Year, sep='.')
metadata2
# New tree without tips from Children, risk group = NA, and sex = NA
tr3 <- drop.tip(tr2, tip = metadata2$tip)
tr3
# Remove the dropped tip estimated dates from the all.times vector
new.times <- all.times
the_names = c(metadata2$tip)
to.remove = which(names(new.times) %in% the_names)
new.times2 <- new.times[-c(to.remove)]
# Testing whether the plot distance tip to root vs estimated dates are correct
# after removing some estimate dates
plot(dist.nodes(tr3)[1:512,513], new.times2)
