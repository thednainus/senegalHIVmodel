model2.mx <- BayesianTools::MAP(m2.mx.m_rd2, start=1000)
model2.mx.p <- as.numeric(format(round(model2.mx$parametersMAP, 3), nsmall = 3))
model2.mx.p[[16]] <- model2.mx$valuesMAP[[1]]
names(model2.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
model3.mx <- BayesianTools::MAP(m3.mx.m_rd2, start=1000)
model3.mx.p <- as.numeric(format(round(model3.mx$parametersMAP, 3), nsmall = 3))
model3.mx.p[[16]] <- model3.mx$valuesMAP[[1]]
names(model3.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
model3.mx.p
model4.mx <- BayesianTools::MAP(m4.mx.m_rd2, start=1000)
model4.mx.p <- as.numeric(format(round(model4.mx$parametersMAP, 3), nsmall = 3))
model4.mx.p[[16]] <- model4.mx$valuesMAP[[1]]
names(model4.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
m02_AG_m1.mx <- BayesianTools::MAP(m02_AG.mx.m_rd2, start=1300)
m02_AG_m1.mx.p <- as.numeric(format(round(m02_AG_m1.mx$parametersMAP, 3), nsmall = 3))
m02_AG_m1.mx.p[[16]] <- m02_AG_m1.mx$valuesMAP[[1]]
names(m02_AG_m1.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
m02_AG_m2.mx <- BayesianTools::MAP(m2.m02_AG.mx.m_rd2, start=1500)
m02_AG_m2.mx.p <- as.numeric(format(round(m02_AG_m2.mx$parametersMAP, 3), nsmall = 3))
m02_AG_m2.mx.p[[16]] <- m02_AG_m2.mx$valuesMAP[[1]]
names(m02_AG_m2.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
mC_m1.mx <- BayesianTools::MAP(mC.mx.m_rd2, start=1000)
mC_m1.mx.p <- as.numeric(format(round(mC_m1.mx$parametersMAP, 3), nsmall = 3))
mC_m1.mx.p[[16]] <- mC_m1.mx$valuesMAP[[1]]
names(mC_m1.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
mC_m2.mx <- BayesianTools::MAP(m2.mC.mx.m_rd2, start=1000)
mC_m2.mx.p <- as.numeric(format(round(mC_m2.mx$parametersMAP, 3), nsmall = 3))
mC_m2.mx.p[[16]] <- mC_m2.mx$valuesMAP[[1]]
names(mC_m2.mx) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
names(mC_m2.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
data_list.mx = data.frame(model2.mx.p, model3.mx.p, model4.mx.p, m02_AG_m1.mx.p, m02_AG_m2.mx.p, mC_m1.mx.p, mC_m2.mx.p)
data_list.mx <- as.matrix(data_list.mx)
model2.p
load(system.file("data/mcmc_runs/mergedRuns_newModel.rda",
package = "senegalHIVmodel"))
model2.p <- as.numeric(format(round(model2$parametersMAP, 3), nsmall = 3))
model2.p[[15]] <- model2$valuesMAP[[1]]
names(model2.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
model3 <- BayesianTools::MAP(m3.m, start=800)
model3.p <- as.numeric(format(round(model3$parametersMAP, 3), nsmall = 3))
model2 <- BayesianTools::MAP(m2.l.m, start=3000)
model2.p <- as.numeric(format(round(model2$parametersMAP, 3), nsmall = 3))
model2.p[[15]] <- model2$valuesMAP[[1]]
names(model2.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
model3 <- BayesianTools::MAP(m3.m, start=800)
model3.p <- as.numeric(format(round(model3$parametersMAP, 3), nsmall = 3))
model3.p[[15]] <- model3$valuesMAP[[1]]
names(model3.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
model4 <- BayesianTools::MAP(m4.l.m, start=2000)
model4.p <- as.numeric(format(round(model4$parametersMAP, 3), nsmall = 3))
model4.p[[15]] <- model4$valuesMAP[[1]]
names(model4.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
m02_AG_m1 <- BayesianTools::MAP(m02_AG.m, start=800)
m02_AG_m1.p <- as.numeric(format(round(m02_AG_m1$parametersMAP, 3), nsmall = 3))
m02_AG_m1.p[[15]] <- m02_AG_m1$valuesMAP[[1]]
names(m02_AG_m1.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
m02_AG_m2 <- BayesianTools::MAP(m02_AG.m2, start=800)
m02_AG_m2.p <- as.numeric(format(round(m02_AG_m2$parametersMAP, 3), nsmall = 3))
m02_AG_m2.p[[15]] <- m02_AG_m2$valuesMAP[[1]]
names(m02_AG_m2.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
mC_m1 <- BayesianTools::MAP(mC.m, start=800)
mC_m1.p <- as.numeric(format(round(mC_m1$parametersMAP, 3), nsmall = 3))
mC_m1.p[[15]] <- m02_AG_m2$valuesMAP[[1]]
names(mC_m1.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
mC_m2 <- BayesianTools::MAP(m2.mC.m, start=800)
mC_m2.p <- as.numeric(format(round(mC_m2$parametersMAP, 3), nsmall = 3))
mC_m2.p[[15]] <- mC_m2$valuesMAP[[1]]
names(mC_m2.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
data_list = data.frame(model2.p, model3.p, model4.p, m02_AG_m1.p, m02_AG_m2.p, mC_m1.p, mC_m2.p)
data_list <- as.matrix(data_list)
colnames(data_list)<-c("M2","M3", "M4", "02_AG: m1", "02_AG: m2", "C: m1", "C: m2")
load(system.file("data/mcmc_runs/mergedRuns_newModels_maleX_rd2.rda",
package = "senegalHIVmodel"))
model2.mx.p <- as.numeric(format(round(model2.mx$parametersMAP, 3), nsmall = 3))
model2.mx.p[[16]] <- model2.mx$valuesMAP[[1]]
names(model2.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
model2.mx <- BayesianTools::MAP(m2.mx.m_rd2, start=1000)
model2.mx.p <- as.numeric(format(round(model2.mx$parametersMAP, 3), nsmall = 3))
model2.mx.p[[16]] <- model2.mx$valuesMAP[[1]]
names(model2.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
model3.mx <- BayesianTools::MAP(m3.mx.m_rd2, start=1000)
model3.mx.p <- as.numeric(format(round(model3.mx$parametersMAP, 3), nsmall = 3))
model3.mx.p[[16]] <- model3.mx$valuesMAP[[1]]
names(model3.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
model4.mx <- BayesianTools::MAP(m4.mx.m_rd2, start=1000)
model4.mx.p <- as.numeric(format(round(model4.mx$parametersMAP, 3), nsmall = 3))
model4.mx.p[[16]] <- model4.mx$valuesMAP[[1]]
names(model4.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
m02_AG_m1.mx <- BayesianTools::MAP(m02_AG.mx.m_rd2, start=1300)
m02_AG_m1.mx.p <- as.numeric(format(round(m02_AG_m1.mx$parametersMAP, 3), nsmall = 3))
m02_AG_m1.mx.p[[16]] <- m02_AG_m1.mx$valuesMAP[[1]]
names(m02_AG_m1.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
m02_AG_m2.mx <- BayesianTools::MAP(m2.m02_AG.mx.m_rd2, start=1500)
m02_AG_m2.mx.p <- as.numeric(format(round(m02_AG_m2.mx$parametersMAP, 3), nsmall = 3))
m02_AG_m2.mx.p[[16]] <- m02_AG_m2.mx$valuesMAP[[1]]
names(m02_AG_m2.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
mC_m1.mx <- BayesianTools::MAP(mC.mx.m_rd2, start=1000)
mC_m1.mx.p <- as.numeric(format(round(mC_m1.mx$parametersMAP, 3), nsmall = 3))
mC_m1.mx.p[[16]] <- mC_m1.mx$valuesMAP[[1]]
names(mC_m1.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
mC_m2.mx <- BayesianTools::MAP(m2.mC.mx.m_rd2, start=1000)
mC_m2.mx.p <- as.numeric(format(round(mC_m2.mx$parametersMAP, 3), nsmall = 3))
mC_m2.mx.p[[16]] <- mC_m2.mx$valuesMAP[[1]]
names(mC_m2.mx.p) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"maleX", "import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp", "Lposterior"))
data_list.mx = data.frame(model2.mx.p, model3.mx.p, model4.mx.p, m02_AG_m1.mx.p, m02_AG_m2.mx.p, mC_m1.mx.p, mC_m2.mx.p)
data_list.mx <- as.matrix(data_list.mx)
colnames(data_list.mx)<-c("M2","M3", "M4", "02_AG: m1", "02_AG: m2", "C: m1", "C: m2")
model2.p
model2.p[-15]
MAP_models <- data.frame(model2.p[-15], model3.p[-15], model4.p[-15], m02_AG_m1.p[-15], m02_AG_m2.p[-15], mC_m1.p[-15], mC_m2.p[-15])
MAP_models
MAP_models_t <- data.frame(t(MAP_models))
MAP_models_t["model"] <- rownames(MAP_models_t)
MAP_models_long <- melt(MAP_models_t, id.vars="model")
MAP_models_t
MAP_models_long <- melt(MAP_models_t, id.vars="model")
MAP_models_long
MAP_models <- data.frame(model2.p, model3.p, model4.p, m02_AG_m1.p, m02_AG_m2.p, mC_m1.p, mC_m2.p)
MAP_models
MAP_models[15,]
MAP_models[-15,]
MAP_models_t <- data.frame(t(MAP_models[-15,]))
MAP_models_t["model"] <- rownames(MAP_models_t)
MAP_models_t
MAP_models[-15,]
MAP_models[-15,]
MAP_models_t
MAP_models_t
msmsp_values.mx <- MAP_models_long.mx[c(29:49),]
library(reshape2)
library(ggplot2)
MAP_models.mx <- data.frame(model2.mx.p, model3.mx.p, model4.mx.p, m02_AG_m1.mx.p, m02_AG_m2.mx.p, mC_m1.mx.p, mC_m2.mx.p)
MAP_models_t.mx <- data.frame(t(MAP_models.mx[-16,]))
MAP_models_t.mx["model"] <- rownames(MAP_models_t.mx)
MAP_models_long.mx <- melt(MAP_models_t.mx, id.vars="model")
gpsp_values.mx <- MAP_models_long.mx[c(1:21),]
gpsp_values.mx$model <- as.factor(gpsp_values.mx$model)
ggplot(data=gpsp_values.mx, aes(x=variable, y=value, group=model, shape=model, colour=model)) +
geom_line(aes(linetype=model), size=0.5) +     # Set linetype by sex
geom_point(size=2, fill="white") +         # Use larger points, fill with white
expand_limits(y=0) +                       # Set y range to include 0
scale_colour_hue(name="Model",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Model",
values=c(0, 15, 1, 16, 2, 18, 5)) +      # Use points with a fill color
scale_linetype_discrete(name="Model") +
xlab("parameter") + ylab("value") + # Set axis labels
theme_bw() + ggtitle("Shape parameter for gp") +
theme(legend.position=c(.7, .7))           # Position legend inside
msmsp_values.mx <- MAP_models_long.mx[c(29:49),]
msmsp_values.mx$model <- as.factor(msmsp_values.mx$model)
ggplot(data=msmsp_values.mx, aes(x=variable, y=value, group=model, shape=model, colour=model)) +
geom_line(aes(linetype=model), size=0.5) +     # Set linetype by sex
geom_point(size=2, fill="white") +         # Use larger points, fill with white
expand_limits(y=0) +                       # Set y range to include 0
scale_colour_hue(name="Model",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Model",
values=c(0, 15, 1, 16, 2, 18, 5)) +      # Use points with a fill color
scale_linetype_discrete(name="Model") +
xlab("parameter") + ylab("value") + # Set axis labels
theme_bw() + ggtitle("Shape parameter for msm") +
theme(legend.position=c(.85, .8))           # Position legend inside
ggplot(data=msmsp_values.mx, aes(x=variable, y=value, group=model, shape=model, colour=model)) +
geom_line(aes(linetype=model), size=0.5) +     # Set linetype by sex
geom_point(size=2, fill="white") +         # Use larger points, fill with white
expand_limits(y=0) +                       # Set y range to include 0
scale_colour_hue(name="Model",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Model",
values=c(0, 15, 1, 16, 2, 18, 5)) +      # Use points with a fill color
scale_linetype_discrete(name="Model") +
xlab("parameter") + ylab("value") + # Set axis labels
theme_bw() + ggtitle("Shape parameter for msm") +
theme(legend.position=c(.7, .7))           # Position legend inside
ggplot(data=msmsp_values.mx, aes(x=variable, y=value, group=model, shape=model, colour=model)) +
geom_line(aes(linetype=model), size=0.5) +     # Set linetype by sex
geom_point(size=2, fill="white") +         # Use larger points, fill with white
expand_limits(y=0) +                       # Set y range to include 0
scale_colour_hue(name="Model",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Model",
values=c(0, 15, 1, 16, 2, 18, 5)) +      # Use points with a fill color
scale_linetype_discrete(name="Model") +
xlab("parameter") + ylab("value") + # Set axis labels
theme_bw() + ggtitle("Shape parameter for msm") +
theme(legend.position=c(.85, .7))           # Position legend inside
ggplot(data=msmsp_values.mx, aes(x=variable, y=value, group=model, shape=model, colour=model)) +
geom_line(aes(linetype=model), size=0.5) +     # Set linetype by sex
geom_point(size=2, fill="white") +         # Use larger points, fill with white
expand_limits(y=0) +                       # Set y range to include 0
scale_colour_hue(name="Model",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Model",
values=c(0, 15, 1, 16, 2, 18, 5)) +      # Use points with a fill color
scale_linetype_discrete(name="Model") +
xlab("parameter") + ylab("value") + # Set axis labels
theme_bw() + ggtitle("Shape parameter for msm") +
theme(legend.position=c(.90, .7))           # Position legend inside
ggplot(data=msmsp_values.mx, aes(x=variable, y=value, group=model, shape=model, colour=model)) +
geom_line(aes(linetype=model), size=0.5) +     # Set linetype by sex
geom_point(size=2, fill="white") +         # Use larger points, fill with white
expand_limits(y=0) +                       # Set y range to include 0
scale_colour_hue(name="Model",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Model",
values=c(0, 15, 1, 16, 2, 18, 5)) +      # Use points with a fill color
scale_linetype_discrete(name="Model") +
xlab("parameter") + ylab("value") + # Set axis labels
theme_bw() + ggtitle("Shape parameter for msm") +
theme(legend.position=c(.86, .7))           # Position legend inside
library(senegalHIVmodel)
rmarkdown::render("vignettes/preliminary_results_Jun2018.Rmd", "pdf_document")
rmarkdown::render("vignettes/preliminary_results_Jun2018.Rmd", "pdf_document")
library(senegalHIVmodel)
rmarkdown::render("vignettes/preliminary_results_Jun2018.Rmd", "pdf_document")
load("mergedRuns_newModels_maleX_rd2.rda")
load(system.file("data/mcmc_runs/mergedRuns_newModels_maleX_rd2.rda"))
devtools::document()
load(system.file("data/mcmc_runs/mergedRuns_newModels_maleX_rd2.rda"))
library(senegalHIVmodel)
load(system.file("data/mcmc_runs/mergedRuns_newModels_maleX_rd2.rda"))
load(system.file("inst/data/mcmc_runs/mergedRuns_newModels_maleX_rd2.rda"))
load(system.file("data/mcmc_runs/mergedRuns_newModels_maleX_rd2.rda", package = "senegalHIVmodel"))
source("analyses/scripts/MaleX/Model2/1.model.v2.R")
m2.s <- getSample(m2.mx.m_rd2, start=1000)
m2.2 <- m2.s[sample(nrow(m2.s),size=2,replace=FALSE),]
m2.teste <- do.call("cbind", apply(m2.1000, 1, post_traj_mx, THETA))
m2.teste <- do.call("cbind", apply(m2.2, 1, post_traj_mx, THETA))
m2.teste
m2_o.1000 <- m2.teste
m2_o.1000
m2_o.1000[2,]
times_m2 <- m2_o.1000[[1]]
birth_list <- bm2_1000
bm2_1000 <- m2_o.1000[2,]
bm2_1000
birth_list <- bm2_1000
class(birth_list)
median.b <- apply(simplify2array(birth_list), 1:2, median)
pafs <- lapply(birth_list, function(f) t(sapply(f, calculate_pafs)))
pafs
class(pafs)
head(pafs)
str(pafs)
pafs
birth_list <- pafs
median.b <- apply(simplify2array(birth_list), 1:2, median)
median.b
class(median.b)
head(median.b)
b.q.025 <- apply(simplify2array(birth_list), 1:2, function(x) quantile(x, probs=0.025))
b.q.975 <- apply(simplify2array(birth_list), 1:2, function(x) quantile(x, probs=0.975))
gpm <- data.frame(median=median.b[,1], lower=b.q.025[,1], upper=b.q.975[,1])
gpm["group"] <- "gpm"
gpm["group2"] <- "gp"
gpf <- data.frame(median=median.b[,2], lower=b.q.025[,2], upper=b.q.975[,2])
gpf["group"] <- "gpf"
gpf["group2"] <- "gp"
msm <- data.frame(median=median.b[,3], lower=b.q.025[,3], upper=b.q.975[,3])
msm["group"] <- "msm"
msm["group2"] <- "msm"
all.data <- rbind(gpm, gpf, msm)
all.data["times"] <-times
times
head(all.data)
m2.teste
devtools::document()
library(senegalHIVmodel)
?births_mq
head(all_data)
head(all.data)
dm
m2.teste
m2_o.1000 <- m2.teste
bm2_1000 <- m2_o.1000[2,]
bm2_1000
class(bm2_1000)
birth_list <- bm2_1000
pafs <- lapply(birth_list, function(f) t(sapply(f, calculate_pafs)))
birth_list[[1]]
birth_list[[1]][[1]]
calculate_pafs(birth_list[[1]][[1]])
calculate_pafs(birth_list[[1]][1])
class(birth_list[[1]][[1]])
birth_list[[1]][[1]]
birth_list[[1]]
calculate_pafs(birth_list[[1]])
birth_list[[1]][[1]]
rowSums(birth_list[[1]][[1]])
birth_list[1]
birth_list[[1]]
birth_list[1]
birth_list[[1]]
calculate_newCases(birth_list[[1]])
calculate_newCases(birth_list[[1]][1])
calculate_newCases(birth_list[[1]][[1]])
calculate_pafs2 <- function(f){
paf <- rowSums(f)[1:3]
}
calculate_pafs2(birth_list[[1]][1])
calculate_pafs2(birth_list[[1]][[1]])
sapply(birth_list, calculate_newCases)
lapply(birth_list, print)
lapply(birth_list, class)
teste <- lapply(birth_list, class)
sapply(teste, class)
fs <- birth_list[[1]]
fs
pafs <- sapply( fs, function(f){
paf <- rowSums( f)[1:3] ; paf <- paf /sum(paf )
})
pafs
t(pafs)
pafs <- sapply( fs, function(f){
paf <- rowSums( f)[1:3]
})
pafs
sum(pafs)
paf
paf <- paf /sum(paf )
pafs <- pafs /sum(pafs )
pafs
t(pafs)
devtools::document()
?births_mq
?births_mq
library(senegalHIVmodel)
devtools::document()
devtools::build()
library(devtools)
?build
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
library(senegalHIVmodel)
set_prev_state_parameters
runZ <- readRDS("analyses/scripts/MaleX/bySubtype/02_AG_m3/Preliminary_results/out_40177664_02_AG_m3_maleX.rds")
x <- getSample(runZ, start=1500)
library(BayesianTools)
x <- getSample(runZ, start=1500)
rangePost = apply(x, 2, range)
u_x <- unique(x)
u_x
str(u_x)
runZ <- readRDS("analyses/scripts/MaleX/bySubtype/02_AG_m4/Preliminary_results/out_40177681_02_AG_m4_maleX.rds")
x <- getSample(runZ, start=1500)
library(BayesianTools)
x <- getSample(runZ, start=1500)
rangePost = apply(x, 2, range)
u_x <- unique(x)
str(u_x)
runZ <- readRDS("analyses/scripts/MaleX/bySubtype/C_m3/Preliminary_analysis/out_40177868_C_m3_maleX.rds")
x <- getSample(runZ, start=1000)
rangePost = apply(x, 2, range)
u_x <- unique(x)
str(u_x)
x <- getSample(runZ, start=1500)
rangePost = apply(x, 2, range)
u_x <- unique(x)
str(u_x)
runZ <- readRDS("analyses/scripts/MaleX/bySubtype/C_m4/Preliminary_results/out_40177889_C_m4_maleX.rds")
x <- getSample(runZ, start=1500)
rangePost = apply(x, 2, range)
u_x <- unique(x)
str(u_x)
29.7/100
21.3/100
23.7/100
38.1/100
devtools::document
devtools::document()
library(senegalHIVmodel)
set_prev_state_parameters
MEAN_PREV_STAT <- NA
SD_PREV_STAT <- NA
set_prev_state_parameters()
SD_PREV_STAT
MEAN_PREV_STAT
set_prev_state_parameters()
n <- 1e4
q <- rnorm(n, 0.012, sd = (0.023 - 0.008) / 3.92)
p_msm <- rnorm(n, 0.297, sd = (0.213 - 0.381) / 3.92) #for 2016
n <- 1e4
q <- rnorm(n, 0.012, sd = (0.023 - 0.008) / 3.92)
p_msm <- rnorm(n, 0.297, sd = (0.213 - 0.381) / 3.92) #for 2016
p_m <- rnorm(n, 0.004, sd = (0.008 - 0.0014) / 3.92) #for 2010
p_msm <- rnorm(n, 0.297, sd = (0.213 - 0.381) / 3.92) #for 2016
p_msm <- rnorm(n, 0.202, sd = (0.237 - 0.168) / 3.92) #for 2007
p_msm
p_msm
p_msm <- rnorm(n, 0.297, sd = (0.213 - 0.381) / 3.92) #for 2016
p_msm
p_msm <- rnorm(n, 0.297, sd = (0.381 - 0.213) / 3.92) #for 2016
p_msm
devtools::document()
library(senegalHIVmodel)
MEAN_PREV_STAT <- NA
SD_PREV_STAT <- NA
set_prev_state_parameters()
MEAN_PREV_STAT
SD_PREV_STAT
set_prev_state_parameters()
MEAN_PREV_STAT
SD_PREV_STAT
devtools::buikd()
devtools::build()
