pafs <- function(f){
paf <- rowSums(f)[1:3] ; paf <- paf /sum(paf)
}
teste2 <- apply(births_m2_100, 1, pafs)
class(births_m2_100)
pafs <- function(f){
paf <- rowSums(f)[1:3] ; paf <- paf /sum(paf)
}
lapply(births_m2_100, function(f) sapply(f, pafs))
teste2 <- lapply(births_m2_100, function(f) sapply(f, pafs))
class(teste2)
teste2
teste2.t <- t(teste2)
teste2.t
class(teste2.t)
head(teste2.t)
head(teste2.t)
teste3 <- teste2.t[1]
teste3
teste2.t[1,]
teste2.t[1,1]
teste2.t[[1]]
teste2
teste2.t <- t(teste2)
teste2.t
teste2.t[1]
teste2.t[1][1]
teste2.t[[1]]
teste2.t[[1]][[1]]
teste2.t[[1]][1]
teste2.t[1,1]
teste2.t[1]
head(teste2.t[1])
t(teste2.t[1])
t(teste2[1])
t(teste2[[1]])
head(t(teste2[[1]]))
head(t(teste2[[100]]))
head(t(teste2[[101]]))
teste2 <- lapply(births_m2_100, function(f) t(sapply(f, pafs)))
head(teste2[[1]])
head(teste2[[2]])
head(teste2[[3]])
head(o.sizes_m2_100)
median.gpm <- as.data.frame(apply(teste2[["gpm"]], 2, median))
teste2[["gpm"]]
teste2[[1]][["gpm"]]
teste2[[1]]
head(teste2[[1]])
teste2[[1]][[1]]
teste2[[1]][1]
teste2[[1]][1,]
teste2[[1]][,1]
teste2[[1]][,"gpm"]
teste2[[1]]["gpm"]
A <- matrix(c(1:9), 3, 3)
B <- matrix(c(2:10), 3, 3)
my.list <- list(A, B)
my.list
teste2[[1]]
teste2[[1][1]]
teste2[[1,1]]
my.list
teste2
my.list
class(my.list)
class(teste2)
teste3 <- apply(simplify2array(teste2), 1:2, median)
head(teste3)
tail(teste)
head(teste3)
tail(teste3)
teste.q <- apply(simplify2array(teste2), 1:2, quantile(x, probs=c(0.25, 0.975)))
teste.q <- apply(simplify2array(teste2), 1:2, quantile(probs=c(0.25, 0.975)))
teste.q <- apply(simplify2array(teste2), 1:2, function(x) quantile(x, probs=c(0.25, 0.975))
quantile(x, probs=c(0.25, 0.975))
pafs <- function(f){
paf <- rowSums(f)[1:3] ; paf <- paf /sum(paf)
}
# gets the element sizes. Sizes are the number of HIV cases
sizes_m2_100 <- m2_o[4,]
#re-organize demes by sizes element
o.sizes_m2_100 <- reorganize_deme_sizes(Nrep = 100, Ntime = 1000, sizes = sizes_m2_100)
times.m2 <- m2_o[[1]]
# get the dataframe to plot tajectories for sizes (median and quantiles)
m2_100.mq <- median_and_quantiles(o.sizes_m2_100, times.m2)
m2_100.mq["group2"] <- ifelse(m2_100.mq$group == "msm", "msm", "gp")
### Model 3 ########
# gets the element sizes
sizes_m3_100 <- m3_o[4,]
#re-organize demes by sizes element
o.sizes_m3_100 <- reorganize_deme_sizes(Nrep = 100, Ntime = 1000, sizes = sizes_m3_100)
times.m3 <- m3_o[[1]]
# get the dataframe to plot tajectories for sizes (median and quantiles)
m3_100.mq <- median_and_quantiles(o.sizes_m3_100, times.m3)
m3_100.mq["group2"] <- ifelse(m3_100.mq$group == "msm", "msm", "gp")
#### Model 4 #####
# gets the element sizes
sizes_m4_100 <- m4_o[4,]
#re-organize demes by sizes element
o.sizes_m4_100 <- reorganize_deme_sizes(Nrep = 100, Ntime = 1000, sizes = sizes_m4_100)
times.m4 <- m4_o[[1]]
# get the dataframe to plot tajectories for sizes (median and quantiles)
m4_100.mq <- median_and_quantiles(o.sizes_m4_100, times.m4)
m4_100.mq["group2"] <- ifelse(m4_100.mq$group == "msm", "msm", "gp")
###### by subtype 02_AG: Model 1 ############
# gets the element sizes
sizes_m02_AGm1_100 <- m02_AG_m1_o[4,]
#re-organize demes by sizes element
o.sizes_m02_AGm1_100 <- reorganize_deme_sizes(Nrep = 100, Ntime = 1000,
sizes = sizes_m02_AGm1_100)
times.m02_AGm1 <- m02_AG_m1_o[[1]]
# get the dataframe to plot tajectories for sizes (median and quantiles)
m02_AGm1_100.mq <- median_and_quantiles(o.sizes_m02_AGm1_100, times.m02_AGm1)
m02_AGm1_100.mq["group2"] <- ifelse(m02_AGm1_100.mq$group == "msm", "msm", "gp")
###### by subtype 02_AG: Model 2 ############
# gets the element sizes
sizes_m02_AGm2_100 <- m02_AG_m2_o[4,]
#re-organize demes by sizes element
o.sizes_m02_AGm2_100 <- reorganize_deme_sizes(Nrep = 100, Ntime = 1000, sizes = sizes_m02_AGm2_100)
times.m02_AGm2 <- m02_AG_m2_o[[1]]
# get the dataframe to plot tajectories for sizes (median and quantiles)
m02_AGm2_100.mq <- median_and_quantiles(o.sizes_m02_AGm2_100, times.m02_AGm2)
m02_AGm2_100.mq["group2"] <- ifelse(m02_AGm2_100.mq$group == "msm", "msm", "gp")
##### by subtype C: model 1 ##########
# gets the element sizes
sizes_C_100 <- C_m1_o[4,]
#re-organize demes by sizes element
o.sizes_C_100 <- reorganize_deme_sizes(Nrep = 100, Ntime = 1000, sizes = sizes_C_100)
times_Cm1 <- C_m1_o[[1]]
# get the dataframe to plot tajectories for sizes (median and quantiles)
m1_C_100.mq <- median_and_quantiles(o.sizes_C_100, times_Cm1)
m1_C_100.mq["group2"] <- ifelse(m1_C_100.mq$group == "msm", "msm", "gp")
##### by subtype C: model 2 ######
# gets the element sizes
sizes_Cm2_100 <- C_m2_o[4,]
#re-organize demes by sizes element
o.sizes_Cm2_100 <- reorganize_deme_sizes(Nrep = 100, Ntime = 1000, sizes = sizes_Cm2_100)
times_Cm2 <- C_m2_o[[1]]
# get the dataframe to plot tajectories for sizes (median and quantiles)
m2_C_100.mq <- median_and_quantiles(o.sizes_Cm2_100, times_Cm2)
m2_C_100.mq["group2"] <- ifelse(m2_C_100.mq$group == "msm", "msm", "gp")
quartz()
p1 <- ggplot(m2_100.mq, aes(x=times, y=median)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.3) +
geom_line(aes(y = median, colour=group)) +
facet_wrap(~ group2, scales = "free") +
ggtitle("All subtypes: Model 2") + ylab("sizes") + theme_bw()
p2 <- ggplot(m3_100.mq, aes(x=times, y=median)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.3) +
geom_line(aes(y = median, colour=group)) +
facet_wrap(~ group2, scales = "free") +
ggtitle("All subtypes: Model 3") + ylab("sizes") + theme_bw()
p3 <- ggplot(m4_100.mq, aes(x=times, y=median)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.3) +
geom_line(aes(y = median, colour=group)) +
facet_wrap(~ group2, scales = "free") +
ggtitle("All subtypes: Model 4") + ylab("sizes") + theme_bw()
p4 <- ggplot(m02_AGm1_100.mq, aes(x=times, y=median)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.3) +
geom_line(aes(y = median, colour=group)) +
facet_wrap(~ group2, scales = "free") +
ggtitle("Subtype 02_AG: Model 1") + ylab("sizes") + theme_bw()
p5 <- ggplot(m02_AGm2_100.mq, aes(x=times, y=median)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.3) +
geom_line(aes(y = median, colour=group)) +
facet_wrap(~ group2, scales = "free") +
ggtitle("Subtype 02_AG: Model 2") + ylab("sizes") + theme_bw()
p6 <- ggplot(m1_C_100.mq, aes(x=times, y=median)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.3) +
geom_line(aes(y = median, colour=group)) +
facet_wrap(~ group2, scales = "free") +
ggtitle("Subtype C: Model 1") + ylab("sizes") + theme_bw()
p7 <- ggplot(m2_C_100.mq, aes(x=times, y=median)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.3) +
geom_line(aes(y = median, colour=group)) +
facet_wrap(~ group2, scales = "free") +
ggtitle("Subtype C: Model 2") + ylab("sizes") + theme_bw()
quartz()
multiplot(p1, p2, p3, cols=1)
quartz()
multiplot(p4, p5, cols=1)
quartz()
multiplot(p6, p7, cols=1)
teste.q <- apply(simplify2array(teste2), 1:2, function(x) quantile(x, probs=c(0.25, 0.975)))
head(teste.q)
teste.q
head(t(teste.q))
class(teste.q)
teste.q <- apply(simplify2array(teste2), 1:2, function(x) quantile(x, probs=0.25, 0.975))
teste.q
teste.q <- apply(simplify2array(teste2), 1:2, function(x) quantile(x, probs=0.25))
teste.q
teste.q <- apply(simplify2array(teste2), 1:2, quantile(probs=0.25))
library(purrr)
teste.map <- map(births_m2_100, pafs)
teste.map <- map(births_m2_100, function(f) t(sapply(f, pafs)))
teste.map <- map_dbl(births_m2_100, pafs)
class(births_m2_100)
births_m2_100[[1]]
births_m2_100[1]
births_m2_100[[1]]
teste.map <- map(births_m2_100, function(f) map(f, pafs))
teste2 <- lapply(births_m2_100, function(f) t(sapply(f, pafs)))
all.equal(teste.map, teste2)
class(teste2)
class(teste.map)
teste2[[1]]
head(teste2[[1]])
head(teste.map[[1]])
length(teste.map[[1]])
teste.map <- map(births_m2_100, function(f) map_dbl(f, pafs))
class(teste2[[1]])
class(teste.map[[1]])
teste.map <- map(births_m2_100, function(f) map_df(f, pafs))
teste.map <- map(births_m2_100, function(f) unlist(map(f, pafs)))
class(teste.map)
teste.map[[1]]
head(teste.map[[1]])
length(teste.map[[1]])
teste.map <- map(births_m2_100, function(f) map(f, pafs))
length(teste.map)
length(teste2)
head(teste.map)
head(teste.map[[1]])
head(teste.map[[100]])
head(teste.map[[101]])
?map
teste2 <- lapply(births_m2_100, function(f) t(sapply(f, pafs)))
teste2[[1]]
class(teste2[[1]])
teste.map <- map(births_m2_100, function(f) t(map(f, pafs)))
teste.map[[1]]
class(teste.map)
class(teste.map[[1]])
teste.map <- map(births_m2_100, function(f) map(f, pafs))
teste.map <- map(births_m2_100, function(f) matrix(map(f, pafs)))
teste.map[[1]]
teste.map[[1]][1]
teste.map[[1]][[1]]
teste.map <- map(births_m2_100, function(f) as.matrix(map(f, pafs)))
teste.map[[1]]
teste.map <- map(births_m2_100, as.matrix(function(f) map(f, pafs)))
teste2 <- lapply(births_m2_100, function(f) t(sapply(f, pafs)))
length(teste2)
teste.map <- map(births_m2_100, function(f) map(f, pafs))
teste3 <- map(simplify2array(teste.map), 1:2, median)
class(teste3)
head(v)
head(teste3)
teste3 <- map(simplify2array(teste2), 1:2, median)
head(teste3)
teste2 <- lapply(births_m2_100, function(f) t(sapply(f, pafs)))
teste3 <- apply(simplify2array(teste2), 1:2, median)
teste3
length(teste3)
tail(teste3)
teste.q.25 <- apply(simplify2array(teste2), 1:2, function(x) quantile(x, probs=0.25))
head(teste.q.25)
teste.q.975 <- apply(simplify2array(teste2), 1:2, function(x) quantile(x, probs=0.975))
head(teste.q.975)
teste4 <- apply(simplify2array(teste2), 1:2, sum)
head(teste4)
head(births_m2_100[[1]])
length(births_m2_100[[1]])
head(teste2)
class(teste2)
length(teste2)
teste2[[1]]
teste2[[2]]
head(teste4)
length(teste2)
0.4245772*100
0.15*100
0.08704886*100
teste2[[100]]
0.02735717*100
teste3[1]
head(teste3)
teste3[1,]
teste3[,1]
gpm.m2 <- cbind(teste3[,1], teste.q.25[,1], teste.q.975[,1])
class(gpm.m2)
gpm.m2
length(teste3[,1])
?data.frame
gpm.m2 <- data.frame(median=teste3[,1], lower=teste.q.25[,1], upper=teste.q.975[,1])
head(gpm.m2)
class(gpm.m2)
teste3[[1]]
head(teste3)
gpf.m2 <- data.frame(median=teste3[,2], lower=teste.q.25[,2], upper=teste.q.975[,2])
msm.m2 <- data.frame(median=teste3[,3], lower=teste.q.25[,3], upper=teste.q.975[,3])
gpm.m2["group"] <- "gpm"
gpm.m2["group2"] <- "gp"
gpf.m2["group"] <- "gpf"
gpf.m2["group2"] <- "gp"
msm.m2["group"] <- "msm"
msm.m2["group2"] <- "msm"
m2.all <- rbind(gpm.m2, gpf.m2, msm.m2)
head(m2.all)
m2_o[1,]
m2_o[[1]]
all.equal(m2_o[1,])
all.equal(m2_o[[1]], m2_o[[50]])
m2_o[[1]]
all.equal()
?all.equal
all.equal(1,2)
all.equal(1,1)
all.equal(m2_o[[1]], m2_o[[50]])
class(m2_o[[50]])
class(m2_o[[1]])
m2_o[1]
m2_o
m2_o[[2]]
m2_o
m2_o[,1]
m2_o[[1]][1]
m2_o[[1]]
m2_o
m2_o[[7]]
m2_o[1,]
m2_o[1,][1]
all.equal(m2_o[1,][1], m2_o[1,][2])
all.equal(m2_o[1,][1], m2_o[1,][50])
all.equal(m2_o[1,][1], m2_o[1,][100])
all.identical(m2_o[1,][1], m2_o[1,][100])
identical(m2_o[1,][1], m2_o[1,][100])
identical(m2_o[1,][1], m2_o[1,][30])
m2.all["times"] <- m2_o[[1]]
head(m2.all)
p6 <- ggplot(m2.all, aes(x=times, y=median)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.3) +
geom_line(aes(y = median, colour=group)) +
facet_wrap(~ group2, scales = "free") +
ggtitle("PAF - All subtypes: Model 2") + ylab("sizes") + theme_bw()
quartz()
p6
p6 <- ggplot(m2.all, aes(x=times, y=median)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha=0.3) +
geom_line(aes(y = median, colour=group)) +
facet_wrap(~ group2, scales = "free") +
ggtitle("PAF - All subtypes: Model 2") + ylab("PAF") + theme_bw()
p6
births_m2_100 <- m2_o[2,][1]
births_m2_100
births_m2_100 <- m2_o[2,][[1]]
births_m2_100
(v_log <- c(TRUE, FALSE, FALSE, TRUE))
(v_int <- 1:4)
(v_int <- 1:4)
(v_doub <- 1:4 * 1.2)
(v_char <- letters[1:4])
(v_char <- letters[1:4])
v_char[c(FALSE, FALSE, TRUE, TRUE)]
v_char[v_log]
v_int[1]
v_int[0]
v_doub_copy <- v_doub
v_doub_copy
str(v_doub_copy)
v_doub_copy[3] <- "uhoh"
str(v_doub_copy)
(big_plans <- rep(NA_integer_, 4))
str(big_plans)
big_plans[3] <- 5L
str(big_plans)
big_plans[1] <- 10
str(big_plans)
letters
as.logical(letters)
as.integer(letters)
as.numeric(letters)
(x <- list(1:3, c("four", "five")))
(y <- list(logical = TRUE, integer = 4L, double = 4 * 1.2, character = "character"))
(z <- list(letters[26:22], transcendental = c(pi, exp(1)), f = function(x) x^2))
is.logical(x)
is.logical(y)
is.logical(z)
is.numeric(x)
is.numeric(y)
is.numeric(z)
is.integer(x)
is.integer(y)
is.integer(z)
is.lits(x)
is.list(x)
is.list(y)
is.list(z)
is.atomic(x)
is.atomic(y)
is.atomic(z)
is.atomic(v_log)
is.recursive(x)
is.recursive(y)
is.recursive(z)
?is.recursive
x[c(FALSE, TRUE)]
x
y[2:3]
z["transcendental"]
x[[2]]
y[["double"]]
z$transcendental
z[["transcendental"]]
my_vec <- c(a = 1, b = 2, c = 3)
my_list <- list(a = 1, b = 2, c = 3)
my_vec
my_list
my_vec[1]
my_vec[[1]]
my_list[1]
my_list[[1]]
my_vec[2:3]
my_list[2:3]
my_vec[[2:3]]
my_list[[2:3]]
my_vec[[c(2:3)]]
devtools::document()
load(system.file("data/mcmc_runs/mergedRuns_newModel.rda",
package = "senegalHIVmodel"))
library(BayesianTools)
MAP(m2.l.m)
MAP(m2.l.m)$parametersMAP
BayesianTools::MAP
library(senegalHIVmodel)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
options(knitr.table.format = "latex")
load(system.file("data/mcmc_runs/mergedRuns_newModel.rda",
package = "senegalHIVmodel"))
load(system.file("data/mcmc_runs/mergedRuns_newModel.rda",
package = "senegalHIVmodel"))
load(system.file("data/mcmc_runs/mergedRuns_newModel.rda",
package = "senegalHIVmodel"))
# MAP after removing first 3,000 iterations
model2 <- BayesianTools::MAP(m2.l.m, start=3000)$parametersMAP
names(model2) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp"))
# MAP after removing first 800 iterations
model3 <- BayesianTools::MAP(m2.m, start=800)$parametersMAP
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
options(knitr.table.format = "latex")
load(system.file("data/mcmc_runs/mergedRuns_newModel.rda",
package = "senegalHIVmodel"))
# MAP after removing first 3,000 iterations
model2 <- BayesianTools::MAP(m2.l.m, start=3000)$parametersMAP
names(model2) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp"))
# MAP after removing first 800 iterations
model3 <- BayesianTools::MAP(m2.m, start=800)$parametersMAP
load(system.file("data/mcmc_runs/mergedRuns_newModel.rda",
package = "senegalHIVmodel"))
# MAP after removing first 3,000 iterations
model2 <- BayesianTools::MAP(m2.l.m, start=3000)$parametersMAP
names(model2) <- (c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp"))
# MAP after removing first 800 iterations
model3 <- BayesianTools::MAP(m2.m, start=800)$parametersMAP
?data.frame
?format
load(system.file("data/mcmc_runs/mergedRuns_newModel.rda",
package = "senegalHIVmodel"))
model2 <- BayesianTools::MAP(m2.l.m, start=3000)$parametersMAP
names(model2) <- format(round((c("gpsp0", "gpsp1", "gpsp2", "gpsploc",
"msmsp0", "msmsp1", "msmsp2", "msmsploc",
"import", "srcNe",
"pmsm2msm", "pgpf2gpm",
"initmsm", "initgp"))),nsmall = 2)
format(round(model2, 2), nsmall = 2)
format(round(model2, 3), nsmall = 2)
format(round(model2, 3), nsmall = 3)
m02_AG_m2 <- BayesianTools::MAP(m02_AG.m2, start=800)$parametersMAP
m02_AG_m2 <- format(round(m02_AG_m2, 3), nsmall = 2)
m02_AG_m2
library(senegalHIVmodel)
library(senegalHIVmodel)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
options(knitr.table.format = "latex")
load(system.file("data/mcmc_runs/mergedRuns_newModel.rda",
package = "senegalHIVmodel"))
model2 <- BayesianTools::MAP(m2.l.m, start=3000)$parametersMAP
model2 <- format(round(model2, 3), nsmall = 3)
model2 <- BayesianTools::MAP(m2.l.m, start=3000)$parametersMAP
model2
model2
class(model2)
model2 <- format(round(model2, 3), nsmall = 3)
model2
class(model2)
model2 <- BayesianTools::MAP(m2.l.m, start=3000)$parametersMAP
as.numeric(format(round(model2, 3), nsmall = 3))
class(as.numeric(format(round(model2, 3), nsmall = 3)))
library(senegalHIVmodel)
